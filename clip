#!/usr/bin/env python3
import os
import sys
import re
import yt_dlp

ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
_finished_downloads = set()

def clean_link(link):
    return re.sub(r"&list=.*", "", link)

def progress_bar_hook(d):
    key = d.get('filename', id(d))  
    if d['status'] == 'downloading':
        if key in _finished_downloads:
            return  
        percent_str = d.get('_percent_str', '0.0%')
        percent_str = ansi_escape.sub('', percent_str).strip()
        speed = d.get('_speed_str', '0B/s').strip()
        try:
            percent_float = float(percent_str.replace('%',''))
        except ValueError:
            percent_float = 0.0
        bar_len = 30
        filled_len = int(bar_len * percent_float / 100)
        bar = '=' * filled_len + '-' * (bar_len - filled_len)
        sys.stdout.write(f"\r[{bar}] {percent_str} | {speed}   ")
        sys.stdout.flush()
    elif d['status'] == 'finished':
        if key not in _finished_downloads:
            sys.stdout.write(f"\r[{'='*30}] 100.0% | Speed:finished\n")
            _finished_downloads.add(key)

def print_help():
    print("""
Usage: clip <YouTube link> [options]

Download audio or video from YouTube.

Options:
  -a             Download audio only (MP3)
  -v             Download video (MP4)
  -D <dir>       Set output directory (default: current directory)
  -h, --help     Show this help message and exit

Examples:
  clip 'https://youtu.be/LgPEyGlUQH8' -a
  clip 'https://youtu.be/LgPEyGlUQH8' -v -D ~/Videos
""")

def search_and_select():
    try:
        query = input("Enter search query: ").strip()
    except KeyboardInterrupt:
        sys.stdout.write("\nSearch canceled by user.\n")
        sys.exit(0)
    if not query:
        print("No query given, exiting.")
        sys.exit(0)
    search_opts = {'quiet': True, 'extract_flat': True, 'skip_download': True, 'noplaylist': True}
    with yt_dlp.YoutubeDL(search_opts) as ydl:
        search_query = f"ytsearch3:{query}"
        info = ydl.extract_info(search_query, download=False)
        entries = info.get('entries', [])
    if not entries:
        print("No results found.")
        sys.exit(0)
    print("\nTop 3 results:")
    for idx, entry in enumerate(entries, 1):
        print(f"{idx}. {entry.get('title')} ({entry.get('url')})")
    while True:
        try:
            choice = input("Choose a video (1-3) or 'q' to cancel: ").strip()
            if choice.lower() == 'q':
                print("Canceled by user.")
                sys.exit(0)
            choice_int = int(choice)
            if 1 <= choice_int <= len(entries):
                return f"https://www.youtube.com/watch?v={entries[choice_int-1]['id']}"
            else:
                print(f"Invalid choice. Enter 1-{len(entries)} or 'q'.")
        except ValueError:
            print("Invalid input. Enter a number or 'q' to quit.")
        except KeyboardInterrupt:
            sys.stdout.write("\nCanceled by user.\n")
            sys.exit(0)

def check_playlist_option(link):
    """If link is part of a playlist, ask user whether to download video or playlist."""
    if "list=" in link and "watch?v=" in link:
        playlist_id = re.search(r"list=([a-zA-Z0-9_-]+)", link)
        if playlist_id:
            while True:
                choice = input(
                    f"\nThis video is part of a playlist (ID: {playlist_id.group(1)}).\n"
                    "Do you want to download:\n"
                    "  1. Just this video\n"
                    "  2. The whole playlist\n"
                    "Enter choice (1/2): "
                ).strip()
                if choice == "1":
                    return True   # single video
                elif choice == "2":
                    return False  # playlist
                else:
                    print("Invalid input. Please enter 1 or 2.")
    return True  # default single video

def main():
    if len(sys.argv) < 2 or sys.argv[1] in ("-h", "--help"):
        print_help()
        sys.exit(0)

    link = None
    audio_only = False
    save_path = os.getcwd()

    args = sys.argv[1:]
    i = 0
    while i < len(args):
        if args[i] == "-a":
            audio_only = True
        elif args[i] == "-v":
            pass  # video-only is default behavior anyway
        elif args[i] == "-D" and i + 1 < len(args):
            save_path = os.path.expanduser(args[i + 1])
            i += 1
        elif not link:
            link = args[i]
        i += 1

    if not link or not link.startswith(("http://", "https://")):
        while True:
            try:
                resp = input("No valid link given. Do you want to search YouTube instead? (y/n): ").strip().lower()
                if resp == 'y':
                    link = search_and_select()
                    break
                elif resp == 'n':
                    print_help()
                    sys.exit(0)
                else:
                    print("Enter 'y' or 'n'.")
            except KeyboardInterrupt:
                sys.stdout.write("\nCanceled by user.\n")
                sys.exit(0)

    # Check for playlist
    noplaylist_flag = check_playlist_option(link)
    if noplaylist_flag:
        link = clean_link(link)

    os.makedirs(save_path, exist_ok=True)

    # Base options
    ydl_opts = {
        'progress_hooks': [progress_bar_hook],
        'outtmpl': os.path.join(save_path, '%(title)s.%(ext)s'),
        'noplaylist': noplaylist_flag,
        'quiet': True,
        'no_warnings': True,
        'postprocessor_args': ['-loglevel', 'error'],
    }

    if audio_only:
        ydl_opts.update({
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        })
    else:
        ydl_opts.update({
            'format': 'bestvideo+bestaudio/best',
            'merge_output_format': 'mp4',
        })

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([link])
    except KeyboardInterrupt:
        sys.stdout.write("\nDownload canceled by user.\n")
        sys.exit(0)
    except yt_dlp.utils.DownloadError as e:
        sys.stdout.write(f"\nDownload error: {e}\n")
        sys.exit(1)

    print(f"\nSaved to: {save_path}")

if __name__ == "__main__":
    main()


